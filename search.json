[
  {
    "objectID": "exercise_1.html",
    "href": "exercise_1.html",
    "title": "Exercise 1",
    "section": "",
    "text": "Create your first teal application!\nReference:\n\nteal::init() - the main function to create the application\nteal.data::teal_data() - data input for teal application\nteal::example_module() - a dummy module\n\n\nExample\nUsing iris and mtcars datasets.\n\n# load teal and all dependent packages\nlibrary(teal)\n\n# create empty `teal_data` object\ndata &lt;- teal_data()\n\n# execute code within it\ndata &lt;- within(data, {\n  IRIS &lt;- iris\n  MTCARS &lt;- mtcars\n})\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    example_module()\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\n\n\nApp\n\n\n\n\n\n\nExercise\nOpen editor in Shinylive\nChange the code above to use ADAM datasets. Please use following dataset(s):\n\nteal.data::rADSL - a dummy ADSL dataset\nteal.data::rADAE - a dummy ADAE dataset\nteal.data::rADTTE - a dummy ADTTE dataset\n\nPlease note these are case-sensitive and all are objects (i.e. no functions - no () needed).\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata &lt;- within(data, {\n  ADSL &lt;- teal.data::rADSL\n  ADAE &lt;- teal.data::rADAE\n  ADTTE &lt;- teal.data::rADTTE\n})\n\n\n\n\n\n\nExercise (bonus)\nPlease read on teal::modify_title(), teal::modify_header(), teal::modify_footer() here to further customise your application.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    example_module()\n  )\n) |&gt;\n  modify_title(\"My new title\") |&gt;\n  modify_header(\"My new header\") |&gt;\n  modify_footer(\"My new footer\")"
  },
  {
    "objectID": "exercise_5.html",
    "href": "exercise_5.html",
    "title": "Exercise 5",
    "section": "",
    "text": "Use transform module to customize outputs from modules.\nReference:\n\n“Transform Module Output” - article describing the functionality\n\n\nCode\nConsider a following custom module:\n\nlibrary(teal)\nlibrary(teal.widgets) # optional extension for UI convinience functions\nlibrary(teal.reporter)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nmy_custom_module_ui &lt;- function(id, decorators) {\n  ns &lt;- NS(id)\n\n  standard_layout(\n    output = div(fluidRow(column(\n      width = 12,\n      br(), hr(),\n      plotOutput(ns(\"plot\"))\n    ))),\n    encoding = div(\n      simple_reporter_ui(ns(\"simple_reporter\")),\n      br(),\n      tags$label('Encodings', class = 'text-primary'),\n      helpText('Analysis Data:', tags$code('ADSL')),\n      selectInput(\n        inputId = ns(\"variable\"),\n        label = \"Select variable\",\n        choices = NULL\n      ),\n      # render decorators input (if any)\n      hr(),\n      ui_transform_teal_data(ns(\"decorate\"), transformators = decorators),\n      hr(),\n      actionButton(\n        inputId = ns(\"src\"),\n        label = \"Show R code\",\n        width = \"100%\"\n      )\n    )\n  )\n}\n\nmy_custom_module_srv &lt;- function(id, data, reporter, filter_panel_api, decorators) {\n  moduleServer(id, function(input, output, session) {\n\n    updateSelectInput(\n      inputId = \"variable\",\n      choices = data()[[\"ADSL\"]] |&gt; select(where(is.numeric)) |&gt; names()\n    )\n\n    # add plot call to qenv\n    result &lt;- reactive({\n      req(input$variable)\n      within(\n        data(),\n        {\n          my_plot &lt;- ggplot(ADSL, aes(x = input_var)) +\n            geom_histogram()\n          my_plot\n        },\n        input_var = as.name(input$variable)\n      )\n    })\n\n    # apply decorator\n    result_decorated &lt;- srv_transform_teal_data(\n      \"decorate\",\n      data = result,\n      transformators = decorators\n    )\n\n    # render to output the object from qenv\n    output$plot &lt;- renderPlot({\n      result_decorated()[[\"my_plot\"]]\n    })\n\n    # reproducibility\n    observeEvent(input$src, {\n      showModal(\n        ui = modalDialog(\n          title = \"Reproducible R code\",\n          tags$pre(\n            get_code(result_decorated())\n          )\n        ),\n        session = session\n      )\n    })\n\n    # reporter\n    simple_reporter_srv(\n      \"simple_reporter\",\n      reporter = reporter,\n      card_fun = function(card = TealReportCard$new(), comment) {\n        card$set_name(\"Histogram Plot\")\n        card$append_plot(result()[[\"my_plot\"]])\n        card$append_fs(filter_panel_api$get_filter_state())\n        card$append_encodings(list(param = input$variable))\n        if (!comment == \"\") {\n          card$append_text(\"Comment\", \"header3\")\n          card$append_text(comment)\n        }\n        card$append_src(get_code(result()))\n        card\n      }\n    )\n\n  })\n}\n\nmy_custom_module &lt;- function(label, decorators = list()) {\n  module(\n    label = label,\n    ui = my_custom_module_ui,\n    server = my_custom_module_srv,\n    ui_args = list(decorators = decorators),\n    server_args = list(decorators = decorators)\n  )\n}\n\nStatic (no inputs) decorator:\n\nstatic_decorator &lt;- teal_transform_module(\n  label = \"Static decorator\",\n  server = function(id, data) {\n    moduleServer(id, function(input, output, session) {\n      reactive({\n        req(data())\n        within(data(), {\n          my_plot &lt;- my_plot +\n            ggtitle(\"This is a better title\")\n        })\n      })\n    })\n  }\n)\n\nInteractive decorator:\n\ninteractive_decorator &lt;- teal_transform_module(\n  label = \"Interactive decorator\",\n  ui = function(id) {\n    ns &lt;- NS(id)\n    div(\n      textInput(ns(\"plot_title\"), \"Plot title\", value = \"Awesome title\")\n    )\n  },\n  server = function(id, data) {\n    moduleServer(id, function(input, output, session) {\n      reactive({\n        req(data())\n        within(data(),\n          {\n            my_plot &lt;- my_plot +\n              ggtitle(my_title)\n            my_plot\n          },\n          my_title = input$plot_title\n        )\n      })\n    })\n  }\n)\n\nApplication:\n\ndata &lt;- teal_data()\ndata &lt;- within(data, {\n  ADSL &lt;- rADSL\n})\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    my_custom_module(\"no decorators\"),\n    my_custom_module(\"static decorator\", decorators = static_decorator),\n    my_custom_module(\"interactive decorator\", decorators = interactive_decorator)\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\n\n\nApp\n\n\n\n\n\n\nExercise\nCreate a decorator for the following application using teal.modules.general::tm_g_scatterplot().\nPlease note that the final object name is plot - see the documentation here.\n\nlibrary(teal.modules.general)\ndata &lt;- teal_data() |&gt; within(ADSL &lt;- rADSL)\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    tm_g_scatterplot(\n      x = data_extract_spec(\n        dataname = \"ADSL\",\n        select = select_spec(\n          label = \"Select variable:\",\n          choices = variable_choices(data[[\"ADSL\"]], \"AGE\"),\n          selected = \"AGE\"\n        )\n      ),\n      y = data_extract_spec(\n        dataname = \"ADSL\",\n        select = select_spec(\n          label = \"Select variable:\",\n          choices = variable_choices(data[[\"ADSL\"]], \"BMRKR1\"),\n          selected = \"BMRKR1\"\n        )\n      ),\n      # Modify here!\n      decorators = list()\n    )\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\nOpen editor in Shinylive\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndecorators = list(\n  plot = teal_transform_module(\n    label = \"Custom decorations\",\n    ui = function(id) {\n      ns &lt;- NS(id)\n      div(\n        textInput(ns(\"plot_title\"), \"Plot title\", value = \"Awesome title\")\n      )\n    },\n    server = function(id, data) {\n      moduleServer(id, function(input, output, session) {\n        reactive({\n          req(data())\n          within(data(),\n            {\n              plot &lt;- plot +\n                ggtitle(my_title)\n              plot\n            },\n            my_title = input$plot_title\n          )\n        })\n      })\n    }\n  )\n)"
  },
  {
    "objectID": "exercise_4.html",
    "href": "exercise_4.html",
    "title": "Exercise 4",
    "section": "",
    "text": "Further enhance your custom module by reproducibility and reporter feature!\nReference:\n\n\"qenv\" article on how to interact with internal qenv object - in particular: teal.code::get_code() function\n“Getting started with teal.reporter” vignette to get to know how to implement reporter\n\nadd reporter and filter_panel_api to the list of arguments of module server function\nuse teal.reporter::simple_reporter_srv() module and create a report a custom card function using teal::TealReportCard class methods\n\n\n\nCode\n\nlibrary(teal)\nlibrary(teal.widgets) # optional extension for UI convinience functions\nlibrary(teal.reporter)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nmy_custom_module_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n\n  standard_layout(\n    output = div(fluidRow(column(\n      width = 12,\n      br(), hr(),\n      plotOutput(ns(\"plot\"))\n    ))),\n    encoding = div(\n      # Reporter buttons\n      simple_reporter_ui(ns(\"simple_reporter\")),\n      br(),\n      tags$label('Encodings', class = 'text-primary'),\n      helpText('Analysis Data:', tags$code('ADSL')),\n      selectInput(\n        inputId = ns(\"variable\"),\n        label = \"Select variable\",\n        choices = NULL\n      ),\n      hr(),\n      # Show R Code buttom\n      actionButton(\n        inputId = ns(\"src\"),\n        label = \"Show R code\",\n        width = \"100%\"\n      )\n    )\n  )\n}\n\nmy_custom_module_srv &lt;- function(id, data, reporter, filter_panel_api) {\n  moduleServer(id, function(input, output, session) {\n\n    # update variable selector by names of data\n    updateSelectInput(\n      inputId = \"variable\",\n      choices = data()[[\"ADSL\"]] |&gt; select(where(is.numeric)) |&gt; names()\n    )\n\n    # add plot call to qenv\n    result &lt;- reactive({\n      req(input$variable)\n      within(\n        data(),\n        {\n          my_plot &lt;- ggplot(ADSL, aes(x = input_var)) +\n            geom_histogram()\n          my_plot\n        },\n        input_var = as.name(input$variable)\n      )\n    })\n\n    # render to output the object from qenv\n    output$plot &lt;- renderPlot({\n      result()[[\"my_plot\"]]\n    })\n\n    # reproducibility\n    observeEvent(input$src, {\n      showModal(\n        ui = modalDialog(\n          title = \"Reproducible R code\",\n          tags$pre(\n            get_code(result())\n          )\n        ),\n        session = session\n      )\n    })\n\n    # reporter\n    simple_reporter_srv(\n      \"simple_reporter\",\n      reporter = reporter,\n      card_fun = function(card = TealReportCard$new(), comment) {\n        card$set_name(\"Histogram Plot\")\n        card$append_plot(result()[[\"my_plot\"]])\n        card$append_fs(filter_panel_api$get_filter_state())\n        card$append_encodings(list(param = input$variable))\n        if (!comment == \"\") {\n          card$append_text(\"Comment\", \"header3\")\n          card$append_text(comment)\n        }\n        card$append_src(get_code(result()))\n        card\n      }\n    )\n\n  })\n}\n\nmy_custom_module &lt;- module(\n  label = \"My Custom Module\",\n  ui = my_custom_module_ui,\n  server = my_custom_module_srv\n)\n\n\ndata &lt;- teal_data()\ndata &lt;- within(data, {\n  ADSL &lt;- rADSL\n})\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    my_custom_module\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\n\n\nApp"
  },
  {
    "objectID": "exercise_3.html",
    "href": "exercise_3.html",
    "title": "Exercise 3",
    "section": "",
    "text": "Create your custom module!\nCreate a custom module that does a simple histogram plot based on user selected columns.\nReference:\n\nteal::module()\n“Creating Custom Modules” vignette\n\"qenv\" article on how to interact with internal qenv object - in particular: teal.code::within() function\n\n\nCode\n\nlibrary(teal)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nmy_custom_module_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  tags$div(\n    # variable selector\n    selectInput(\n      inputId = ns(\"variable\"),\n      label = \"Select variable\",\n      # initialize empty - to be updated from within server\n      choices = NULL\n    ),\n    plotOutput(ns(\"plot\"))\n  )\n}\n\nmy_custom_module_srv &lt;- function(id, data) {\n  moduleServer(id, function(input, output, session) {\n\n    # update variable selector by names of data\n    updateSelectInput(\n      inputId = \"variable\",\n      choices = data()[[\"ADSL\"]] |&gt; select(where(is.numeric)) |&gt; names()\n    )\n\n    # add plot call to qenv\n    result &lt;- reactive({\n      req(input$variable)\n      within(\n        data(),\n        {\n          my_plot &lt;- ggplot(ADSL, aes(x = input_var)) +\n            geom_histogram()\n          my_plot\n        },\n        input_var = as.name(input$variable)\n      )\n    })\n\n    # render to output the object from qenv\n    output$plot &lt;- renderPlot({\n      result()[[\"my_plot\"]]\n    })\n\n  })\n}\n\nmy_custom_module &lt;- module(\n  label = \"My Custom Module\",\n  ui = my_custom_module_ui,\n  server = my_custom_module_srv\n)\n\n\ndata &lt;- teal_data()\ndata &lt;- within(data, {\n  ADSL &lt;- rADSL\n})\n\napp &lt;- init(\n  data = data,\n  modules = list(\n    my_custom_module\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\n\n\nApp\n\n\n\n\n\n\nExercise\nOpen editor in Shinylive\nLet’s enhance the module:\n\nLet’s create a new parameter binwidth:\n\nadd a new widget to the UI\n\nthat widget should be created with shiny::sliderInput()\nmake reasonable values of min, max, step and initial value\n\nread and use that widget in server\n\npass this parameter value as binwidth argument to the geom_histogram() function\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nmy_custom_module_ui &lt;- function(id) {\n  ...\n  tags$div(\n    ...,\n    sliderInput(\n      inputId = ns(\"binwidth\"),\n      label = \"binwidth\",\n      min = 1,\n      max = 10,\n      step = 1,\n      value = 3\n    ),\n    ...\n  )\n}\n\n\nmy_custom_module_srv &lt;- function(id, data) {\n  moduleServer(id, function(input, output, session) {\n\n    ...\n\n    # add plot call to qenv\n    result &lt;- reactive({\n      req(input$variable)\n      within(\n        data(),\n        {\n          my_plot &lt;- ggplot(ADSL, aes(x = input_var)) +\n            geom_histogram(binwidth = input_binwidth)\n          my_plot\n        },\n        input_var = as.name(input$variable),\n        input_binwidth = input$binwidth\n      )\n    })\n\n    ...\n\n  })\n}\n\n\n\n\nLet’s add more datasets\n\nextend data with ADAE = teal.data::rADAE\nadd a new widget in the UI\n\nthat widget should be created with shiny::selectInput()\ninitialize empty and update values in the same way as for input$variable\n\nread and use in the server\n\nmodify the variable selection - it has to be chosen from the currently selected dataset\n\nconvert to observeEvent() on input$dataset\nadd at the beggining: req(input$dataset) to assure non empty selection\nmodify to choices = names(data()[[input$dataset]])\n\nmodify the observer call\n\nadd req(input$dataset)\nadd req(input$variables %in% names(data()[[input$dataset]]))\n\nmodify ggplot call\n\nconvert the value to a symbol and use as a first argument of ggplot()\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndata &lt;- within(data, {\n  ADSL &lt;- rADSL\n  ADAE &lt;- teal.data::rADAE\n})\n\n\nmy_custom_module_ui &lt;- function(id) {\n  ns &lt;- NS(id)\n  tags$div(\n    # dataset selector\n    selectInput(\n      inputId = ns(\"dataset\"),\n      label = \"Select dataset\",\n      choices = NULL\n    ),\n    ...\n  )\n}\n\n\nmy_custom_module_srv &lt;- function(id, data) {\n  moduleServer(id, function(input, output, session) {\n\n    updateSelectInput(\n      inputId = \"dataset\",\n      choices = names(data())\n    )\n\n    observeEvent(\n      input$dataset,\n      {\n        req(input$dataset)\n        updateSelectInput(\n          inputId = \"variable\",\n          choices = data()[[input$dataset]] |&gt; select(where(is.numeric)) |&gt; names()\n        )\n      }\n    )\n\n    result &lt;- reactive({\n      req(input$dataset)\n      req(input$variable)\n      within(\n        data(),\n        {\n          my_plot &lt;- ggplot(input_dataset, aes(x = input_var)) +\n            geom_histogram()\n          my_plot\n        },\n        input_dataset = as.name(input$dataset),\n        input_var = as.name(input$variable)\n      )\n    })\n\n    output$plot &lt;- renderPlot({\n      result()[[\"my_plot\"]]\n    })\n\n  })\n}\n\n\n\n\n\n\n\nExercise (bonus)\n\nConvert module to a function and let label be a function parameter."
  },
  {
    "objectID": "shinylive.html",
    "href": "shinylive.html",
    "title": "Introduction to Shinylive",
    "section": "",
    "text": "Shinylive is a technology that enables Shiny applications to run entirely in a web browser without needing a separate R or Python server. It was developed by Posit (formerly RStudio) and represents a significant advancement in making interactive applications more accessible and sharable."
  },
  {
    "objectID": "shinylive.html#what-is-shinylive",
    "href": "shinylive.html#what-is-shinylive",
    "title": "Introduction to Shinylive",
    "section": "",
    "text": "Shinylive is a technology that enables Shiny applications to run entirely in a web browser without needing a separate R or Python server. It was developed by Posit (formerly RStudio) and represents a significant advancement in making interactive applications more accessible and sharable."
  },
  {
    "objectID": "shinylive.html#how-shinylive-works",
    "href": "shinylive.html#how-shinylive-works",
    "title": "Introduction to Shinylive",
    "section": "How Shinylive Works",
    "text": "How Shinylive Works\nShinylive uses WebAssembly to compile the R or Python runtime to run directly in the browser. This means:\n\nApplications run entirely client-side\nNo server is required to execute the code\nApplications can be embedded in static websites, blogs, or documentation."
  },
  {
    "objectID": "shinylive.html#r-packages-in-shinylive",
    "href": "shinylive.html#r-packages-in-shinylive",
    "title": "Introduction to Shinylive",
    "section": "R Packages in Shinylive",
    "text": "R Packages in Shinylive\nShinylive has access to a subset of R packages that have been compiled to WebAssembly. These packages are:\n\nSourced from a WebAssembly binary repository that functions as a mirror of CRAN\nPre-compiled specifically to work in the browser environment\nLimited to packages that are compatible with WebAssembly constraints\nUpdated periodically to match CRAN versions, though there may be some delay\n\nWhen developing Shinylive applications, it’s important to check if your required packages are available in the WebAssembly repository. The core tidyverse packages and many popular visualization libraries are supported, but specialized packages might not be available yet."
  },
  {
    "objectID": "shinylive.html#examples",
    "href": "shinylive.html#examples",
    "title": "Introduction to Shinylive",
    "section": "Examples",
    "text": "Examples\nShinylive can be embedded directly in Quarto documents like this:\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  h2(\"Hello Shinylive!\"),\n  sliderInput(\"n\", \"Number of observations\", 10, 100, 50),\n  plotOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$plot &lt;- renderPlot({\n    hist(rnorm(input$n), main = \"Random Normal Values\")\n  })\n}\n\nshinyApp(ui, server)\n```"
  },
  {
    "objectID": "shinylive.html#limitations",
    "href": "shinylive.html#limitations",
    "title": "Introduction to Shinylive",
    "section": "Limitations",
    "text": "Limitations\nWhile powerful, Shinylive does have some constraints:\n\nPerformance constraints: Browser-based execution is slower than server-based apps, with memory limits affecting dataset size and calculation speed\nPackage overhead: Each package must be downloaded separately for every WebR instance, increasing load times and bandwidth usage\nLimited package availability: Not all CRAN packages are available in the WebAssembly environment\nResource limitations: Browser constraints impact complex applications and large datasets\n\nBest suited for simpler applications with minimal dependencies, particularly when bandwidth may be limited.\nCheck out the official documentation for more details."
  },
  {
    "objectID": "exercise_2.html",
    "href": "exercise_2.html",
    "title": "Exercise 2",
    "section": "",
    "text": "Enhance your application with pre-built modules!\nReference:\n\nteal.modules.general::tm_data_table() to create a data previewer module\nteal.modules.clinical::tm_t_summary() to create a demographic summary table:\n\nplease read the documentation - especially arm_var and summarize_vars argument and what data type it takes\nuse both \"ARM\" and \"ARMCD\" as arm_var\nuse \"SEX\", \"AGE\" and \"RACE\" as summarize_vars\n\n\n\nExample\n\nlibrary(dplyr)\nlibrary(teal.modules.general)\nlibrary(teal.modules.clinical)\n\n# Prepare data object\ndata &lt;- teal_data()\ndata &lt;- within(data, {\n  ADSL &lt;- rADSL\n})\njoin_keys(data) &lt;- default_cdisc_join_keys[\"ADSL\"]\n\n\n# Prepare module inputs\nADSL &lt;- data[[\"ADSL\"]]\n\ncs_arm_var &lt;- choices_selected(\n  choices = variable_choices(ADSL, subset = c(\"ARMCD\", \"ARM\")),\n  selected = \"ARM\"\n)\n\ndemog_vars_adsl &lt;- ADSL |&gt;\n  select(where(is.numeric) | where(is.factor)) |&gt;\n  names()\n\n\n# Create app\napp &lt;- init(\n  data = data,\n  modules = list(\n    tm_data_table(\"Data Table\"),\n    tm_t_summary(\n      label = \"Demographic Table\",\n      dataname = \"ADSL\",\n      arm_var = cs_arm_var,\n      summarize_vars = choices_selected(\n        choices = variable_choices(ADSL, demog_vars_adsl),\n        selected = c(\"SEX\", \"AGE\", \"RACE\")\n      )\n    )\n  )\n)\n\nif (Sys.getenv(\"QUARTO_ROOT\") == \"\") {\n  shinyApp(app$ui, app$server)\n}\n\n\n\nApp\n\n\n\n\n\n\nExercise\nOpen editor in Shinylive\nThe module output requires further tweaks:\n\nWe dont’ want to have “ALL PATIENT” column - let’s remove it. Please read function documentation and identify the argument to be changed.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ntm_t_summary(\n  ...,\n  add_total = FALSE\n)\n\n\n\n\nIt is possible to select “ARM” in the “Summarize Variables” input which does not make much sense. Let’s limit the selection to only a few interesting columns of your choice. Which object to change?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\n# explicit\ndemog_vars_adsl &lt;- c(\"AGE\", \"SEX\", \"RACE\", ...)\n# alternatively: exclude\ndemog_vars_adsl &lt;- ... |&gt; setdiff(c(\"AGE\", ...))\n\n\n\n\nLet’s create two modules in the same application - one with “ARM” column as arm_var and the other with “ARMCD”.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\napp &lt;- init(\n  ...\n  modules = list(\n    ...,\n    tm_t_summary(\n      ...,\n      arm_var = choices_selected(\"ARM\", \"ARM\", fixed = TRUE)\n    ),\n    tm_t_summary(\n      ...,\n      arm_var = choices_selected(\"ARMCD\", \"ARMCD\", fixed = TRUE)\n    )\n  )\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "teal-workshop-phuse-css-2025",
    "section": "",
    "text": "Welcome to the teal workshop on PHUSE CSS."
  },
  {
    "objectID": "index.html#packages-used",
    "href": "index.html#packages-used",
    "title": "teal-workshop-phuse-css-2025",
    "section": "Packages used:",
    "text": "Packages used:\n teal - Shiny-based interactive exploration framework for analyzing data\nteal.modules.general - General Purpose Teal Modules\nteal.modules.clinical - Provides teal modules for the standard clinical trials outputs"
  },
  {
    "objectID": "index.html#environment",
    "href": "index.html#environment",
    "title": "teal-workshop-phuse-css-2025",
    "section": "Environment",
    "text": "Environment\nThis workshop will be run entirely in the Shinylive service. Please read an introductionary article here. Alternatively one can use Posit Cloud (requires regestration) or run locally (requires installing the packages).\nThe code is available on GitHub."
  },
  {
    "objectID": "index.html#further-reads",
    "href": "index.html#further-reads",
    "title": "teal-workshop-phuse-css-2025",
    "section": "Further reads:",
    "text": "Further reads:\n\nGetting started with teal\nteal Technical Blueprint - for developers or advanced users\nteal gallery - A gallery of sample apps based on the teal framework.\nTLG Catalog - A catalog of Tables, Listings and Graphs (TLGs) created with NEST R packages\npharmaverse - Packages for clinical reporting workflows"
  }
]